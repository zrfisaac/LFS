'\" t
.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: GPL-1.0-or-later
.\"
.\" based on glibc infopages
.\" polished, aeb
.\"
.TH remquo 3 2024-05-02 "Linux man-pages (unreleased)"
.SH NAME
remquo, remquof, remquol \- remainder and part of quotient
.SH LIBRARY
Math library
.RI ( libm ", " \-lm )
.SH SYNOPSIS
.nf
.B #include <math.h>
.P
.BI "double remquo(double " x ", double " y ", int *" quo );
.BI "float remquof(float " x ", float " y ", int *" quo );
.BI "long double remquol(long double " x ", long double " y ", int *" quo );
.fi
.P
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.P
.BR remquo (),
.BR remquof (),
.BR remquol ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
.fi
.SH DESCRIPTION
These functions compute the remainder and part of the quotient
upon division of
.I x
by
.IR y .
A few bits of the quotient are stored via the
.I quo
pointer.
The remainder is returned as the function result.
.P
The value of the remainder is the same as that computed by the
.BR remainder (3)
function.
.P
The value stored via the
.I quo
pointer has the sign of
.I x\~/\~y
and agrees with the quotient in at least the low order 3 bits.
.P
For example, \fIremquo(29.0,\ 3.0)\fP returns \-1.0 and might store 2.
Note that the actual quotient might not fit in an integer.
.\" A possible application of this function might be the computation
.\" of sin(x). Compute remquo(x, pi/2, &quo) or so.
.\"
.\" glibc, UnixWare: return 3 bits
.\" MacOS 10: return 7 bits
.SH RETURN VALUE
On success, these functions return the same value as
the analogous functions described in
.BR remainder (3).
.P
If
.I x
or
.I y
is a NaN, a NaN is returned.
.P
If
.I x
is an infinity,
and
.I y
is not a NaN,
a domain error occurs, and
a NaN is returned.
.P
If
.I y
is zero,
and
.I x
is not a NaN,
a domain error occurs, and
a NaN is returned.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.P
The following errors can occur:
.TP
Domain error: \fIx\fP is an infinity or \fIy\fP is 0, \
and the other argument is not a NaN
.\" .I errno
.\" is set to
.\" .BR EDOM .
An invalid floating-point exception
.RB ( FE_INVALID )
is raised.
.P
These functions do not set
.IR errno .
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: https://www.sourceware.org/bugzilla/show_bug.cgi?id=6802
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.na
.nh
.BR remquo (),
.BR remquof (),
.BR remquol ()
T}	Thread safety	MT-Safe
.TE
.SH STANDARDS
C11, POSIX.1-2008.
.SH HISTORY
glibc 2.1.
C99, POSIX.1-2001.
.SH SEE ALSO
.BR fmod (3),
.BR logb (3),
.BR remainder (3)
