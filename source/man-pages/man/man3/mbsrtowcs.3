'\" t
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH mbsrtowcs 3 2024-06-15 "Linux man-pages (unreleased)"
.SH NAME
mbsrtowcs \- convert a multibyte string to a wide-character string (restartable)
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.P
.BI "size_t mbsrtowcs(wchar_t " dest "[restrict ." dsize ],
.BI "                 const char **restrict " src ,
.BI "                 size_t " dsize ", mbstate_t *restrict " ps );
.fi
.SH DESCRIPTION
If
.I dest
is not NULL,
convert the
multibyte string
.I *src
to a wide-character string starting at
.IR dest .
At most
.I dsize
wide characters are written to
.IR dest .
The shift state
.I *ps
is updated.
The conversion is effectively performed by repeatedly
calling
.I "mbrtowc(dest, *src, n, ps)"
where
.I n
is some
positive number, as long as this call succeeds, and then incrementing
.I dest
by one and
.I *src
by the number of bytes consumed.
The conversion can stop for three reasons:
.IP \[bu] 3
An invalid multibyte sequence has been encountered.
In this case,
.I *src
is left pointing to the invalid multibyte sequence,
.I (size_t)\ \-1
is returned,
and
.I errno
is set to
.BR EILSEQ .
.IP \[bu]
.I dsize
non-L\[aq]\[rs]0\[aq] wide characters have been stored at
.IR dest .
In this case,
.I *src
is left pointing to the next
multibyte sequence to be converted,
and the number of wide characters written to
.I dest
is returned.
.IP \[bu]
The multibyte string has been completely converted, including the
terminating null wide character (\[aq]\[rs]0\[aq]), which has the side
effect of bringing back
.I *ps
to the
initial state.
In this case,
.I *src
is set to NULL, and the number of wide
characters written to
.IR dest ,
excluding the terminating null wide character, is returned.
.P
If
.I dest
is NULL,
.I dsize
is ignored,
and the conversion proceeds as above,
except that the converted wide characters are not written out to memory,
and that no length limit exists.
.P
In both of the above cases,
if
.I ps
is NULL, a static anonymous
state known only to the
.BR mbsrtowcs ()
function is used instead.
.P
In order to avoid the case 2 above, the programmer should make sure
.I dsize
is
greater than or equal to
.IR "mbsrtowcs(NULL,src,0,ps)+1" .
.P
The programmer must ensure that there is room for at least
.I dsize
wide
characters at
.IR dest .
.P
This function is a restartable version of
.BR mbstowcs (3).
.SH RETURN VALUE
The number of wide characters that make
up the converted part of the wide-character string, not including the
terminating null wide character.
If an invalid multibyte sequence was
encountered,
.I (size_t)\ \-1
is returned, and
.I errno
set to
.BR EILSEQ .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lbx
l l l.
Interface	Attribute	Value
T{
.na
.nh
.BR mbsrtowcs ()
T}	Thread safety	T{
.na
.nh
MT-Unsafe race:mbsrtowcs/!ps
T}
.TE
.SH STANDARDS
C11, POSIX.1-2008.
.SH HISTORY
POSIX.1-2001, C99.
.SH NOTES
The behavior of
.BR mbsrtowcs ()
depends on the
.B LC_CTYPE
category of the
current locale.
.P
Passing NULL as
.I ps
is not multithread safe.
.SH SEE ALSO
.BR iconv (3),
.BR mbrtowc (3),
.BR mbsinit (3),
.BR mbsnrtowcs (3),
.BR mbstowcs (3)
