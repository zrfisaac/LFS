'\" t
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Inspired by a page by Walter Harms created 2002-08-10
.\"
.TH ilogb 3 2024-05-02 "Linux man-pages (unreleased)"
.SH NAME
ilogb, ilogbf, ilogbl \- get integer exponent of a floating-point value
.SH LIBRARY
Math library
.RI ( libm ", " \-lm )
.SH SYNOPSIS
.nf
.B #include <math.h>
.P
.BI "int ilogb(double " x );
.BI "int ilogbf(float " x );
.BI "int ilogbl(long double " x );
.fi
.P
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.P
.BR ilogb ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
        || _XOPEN_SOURCE >= 500
.\"    || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
        || /* Since glibc 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.fi
.P
.BR ilogbf (),
.BR ilogbl ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
        || /* Since glibc 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
These functions return the exponent part of their argument
as a signed integer.
When no error occurs, these functions
are equivalent to the corresponding
.BR logb (3)
functions, cast to
.IR int .
.SH RETURN VALUE
On success, these functions return the exponent of
.IR x ,
as a signed integer.
.P
If
.I x
is zero, then a domain error occurs, and the functions return
.\" the POSIX.1 spec for logb() says logb() gives pole error for this
.\" case, but for ilogb() it says domain error.
.BR FP_ILOGB0 .
.\" glibc: The numeric value is either `INT_MIN' or `-INT_MAX'.
.P
If
.I x
is a NaN, then a domain error occurs, and the functions return
.BR FP_ILOGBNAN .
.\" glibc: The numeric value is either `INT_MIN' or `INT_MAX'.
.\" On i386, FP_ILOGB0 and FP_ILOGBNAN have the same value.
.P
If
.I x
is negative infinity or positive infinity, then
a domain error occurs, and the functions return
.BR INT_MAX .
.\"
.\" POSIX.1-2001 also says:
.\" If the correct value is greater than {INT_MAX}, {INT_MAX}
.\" shall be returned and a domain error shall occur.
.\"
.\" If the correct value is less than {INT_MIN}, {INT_MIN}
.\" shall be returned and a domain error shall occur.
.SH ERRORS
See
.BR math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.P
The following errors can occur:
.TP
Domain error: \fIx\fP is 0 or a NaN
An invalid floating-point exception
.RB ( FE_INVALID )
is raised, and
.I errno
is set to
.B EDOM
(but see BUGS).
.TP
Domain error: \fIx\fP is an infinity
An invalid floating-point exception
.RB ( FE_INVALID )
is raised, and
.I errno
is set to
.B EDOM
(but see BUGS).
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.na
.nh
.BR ilogb (),
.BR ilogbf (),
.BR ilogbl ()
T}	Thread safety	MT-Safe
.TE
.SH STANDARDS
C11, POSIX.1-2008.
.SH HISTORY
C99, POSIX.1-2001.
.SH BUGS
.\" Bug raised: https://www.sourceware.org/bugzilla/show_bug.cgi?id=6794
Before glibc 2.16, the following bugs existed in the
glibc implementation of these functions:
.IP \[bu] 3
The domain error case where
.I x
is 0 or a NaN did not cause
.I errno
to be set or (on some architectures) raise a floating-point exception.
.IP \[bu]
The domain error case where
.I x
is an infinity did not cause
.I errno
to be set or raise a floating-point exception.
.SH SEE ALSO
.BR log (3),
.BR logb (3),
.BR significand (3)
