.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified Wed Jul 21 23:02:38 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2001-11-17, aeb
.\"
.TH _exit 2 2024-05-02 "Linux man-pages (unreleased)"
.SH NAME
_exit, _Exit \- terminate the calling process
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.P
.BI "[[noreturn]] void _exit(int " status );
.P
.B #include <stdlib.h>
.P
.BI "[[noreturn]] void _Exit(int " status );
.fi
.P
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.P
.BR _Exit ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
.fi
.SH DESCRIPTION
.BR _exit ()
terminates the calling process "immediately".
Any open file descriptors belonging to the process are closed.
Any children of the process are inherited by
.BR init (1)
(or by the nearest "subreaper" process as defined through the use of the
.BR prctl (2)
.B PR_SET_CHILD_SUBREAPER
operation).
The process's parent is sent a
.B SIGCHLD
signal.
.P
The value
.I "status & 0xFF"
is returned to the parent process as the process's exit status, and
can be collected by the parent using one of the
.BR wait (2)
family of calls.
.P
The function
.BR _Exit ()
is equivalent to
.BR _exit ().
.SH RETURN VALUE
These functions do not return.
.SH STANDARDS
.TP
.BR _exit ()
POSIX.1-2008.
.TP
.BR _Exit ()
C11, POSIX.1-2008.
.SH HISTORY
POSIX.1-2001, SVr4, 4.3BSD.
.P
.BR _Exit ()
was introduced by C99.
.SH NOTES
For a discussion on the effects of an exit, the transmission of
exit status, zombie processes, signals sent, and so on, see
.BR exit (3).
.P
The function
.BR _exit ()
is like
.BR exit (3),
but does not call any
functions registered with
.BR atexit (3)
or
.BR on_exit (3).
Open
.BR stdio (3)
streams are not flushed.
On the other hand,
.BR _exit ()
does close open file descriptors, and this may cause an unknown delay,
waiting for pending output to finish.
If the delay is undesired,
it may be useful to call functions like
.BR tcflush (3)
before calling
.BR _exit ().
Whether any pending I/O is canceled, and which pending I/O may be
canceled upon
.BR _exit (),
is implementation-dependent.
.SS C library/kernel differences
The text above in DESCRIPTION describes the traditional effect of
.BR _exit (),
which is to terminate a process,
and these are the semantics specified by POSIX.1 and implemented
by the C library wrapper function.
On modern systems, this means termination of all threads in the process.
.P
By contrast with the C library wrapper function, the raw Linux
.BR _exit ()
system call terminates only the calling thread, and actions such as
reparenting child processes or sending
.B SIGCHLD
to the parent process are performed only if this is
the last thread in the thread group.
.\" _exit() is used by pthread_exit() to terminate the calling thread
.P
Up to glibc 2.3, the
.BR _exit ()
wrapper function invoked the kernel system call of the same name.
Since glibc 2.3, the wrapper function invokes
.BR exit_group (2),
in order to terminate all of the threads in a process.
.SH SEE ALSO
.BR execve (2),
.BR exit_group (2),
.BR fork (2),
.BR kill (2),
.BR wait (2),
.BR wait4 (2),
.BR waitpid (2),
.BR atexit (3),
.BR exit (3),
.BR on_exit (3),
.BR termios (3)
