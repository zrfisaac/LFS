.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\"
.\" SPDX-License-Identifier: GPL-1.0-or-later
.\"
.TH io_setup 2 2024-05-02 "Linux man-pages (unreleased)"
.SH NAME
io_setup \- create an asynchronous I/O context
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.P
Alternatively, Asynchronous I/O library
.RI ( libaio ", " \-laio );
see VERSIONS.
.SH SYNOPSIS
.nf
.BR "#include <linux/aio_abi.h>" "          /* Defines needed types */"
.P
.BI "long io_setup(unsigned int " nr_events ", aio_context_t *" ctx_idp );
.fi
.P
.IR Note :
There is no glibc wrapper for this system call; see VERSIONS.
.SH DESCRIPTION
.IR Note :
this page describes the raw Linux system call interface.
The wrapper function provided by
.I libaio
uses a different type for the
.I ctx_idp
argument.
See VERSIONS.
.P
The
.BR io_setup ()
system call
creates an asynchronous I/O context suitable for concurrently processing
\fInr_events\fP operations.
The
.I ctx_idp
argument must not point to an AIO context that already exists, and must
be initialized to 0 prior to the call.
On successful creation of the AIO context, \fI*ctx_idp\fP is filled in
with the resulting handle.
.SH RETURN VALUE
On success,
.BR io_setup ()
returns 0.
For the failure return, see VERSIONS.
.SH ERRORS
.TP
.B EAGAIN
The specified \fInr_events\fP exceeds the limit of available events,
as defined in
.I /proc/sys/fs/aio\-max\-nr
(see
.BR proc (5)).
.TP
.B EFAULT
An invalid pointer is passed for \fIctx_idp\fP.
.TP
.B EINVAL
\fIctx_idp\fP is not initialized, or the specified \fInr_events\fP
exceeds internal limits.
\fInr_events\fP should be greater than 0.
.TP
.B ENOMEM
Insufficient kernel resources are available.
.TP
.B ENOSYS
.BR io_setup ()
is not implemented on this architecture.
.SH VERSIONS
glibc does not provide a wrapper for this system call.
You could invoke it using
.BR syscall (2).
But instead, you probably want to use the
.BR io_setup ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.IR libaio .
.P
Note that the
.I libaio
wrapper function uses a different type
.RI ( "io_context_t\ *" )
.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
for the
.I ctx_idp
argument.
Note also that the
.I libaio
wrapper does not follow the usual C library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH STANDARDS
Linux.
.SH HISTORY
Linux 2.5.
.SH SEE ALSO
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_submit (2),
.BR aio (7)
.\" .SH AUTHOR
.\" Kent Yoder.
