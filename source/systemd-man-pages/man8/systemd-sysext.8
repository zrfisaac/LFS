'\" t
.TH "SYSTEMD\-SYSEXT" "8" "" "systemd 256.4" "systemd-sysext"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-sysext, systemd-sysext.service, systemd-confext, systemd-confext.service \- Activates System Extension Images
.SH "SYNOPSIS"
.HP \w'\fBsystemd\-sysext\fR\ 'u
\fBsystemd\-sysext\fR [OPTIONS...] COMMAND
.PP
systemd\-sysext\&.service
.HP \w'\fBsystemd\-confext\fR\ 'u
\fBsystemd\-confext\fR [OPTIONS...] COMMAND
.PP
systemd\-confext\&.service
.SH "DESCRIPTION"
.PP
\fBsystemd\-sysext\fR
activates/deactivates system extension images\&. System extension images may \(en dynamically at runtime \(em extend the
/usr/
and
/opt/
directory hierarchies with additional files\&. This is particularly useful on immutable system images where a
/usr/
and/or
/opt/
hierarchy residing on a read\-only file system shall be extended temporarily at runtime without making any persistent modifications\&.
.PP
System extension images should contain files and directories similar in fashion to regular operating system tree\&. When one or more system extension images are activated, their
/usr/
and
/opt/
hierarchies are combined via
"overlayfs"
with the same hierarchies of the host OS, and the host
/usr/
and
/opt/
overmounted with it ("merging")\&. When they are deactivated, the mount point is disassembled \(em again revealing the unmodified original host version of the hierarchy ("unmerging")\&. Merging thus makes the extension\*(Aqs resources suddenly appear below the
/usr/
and
/opt/
hierarchies as if they were included in the base OS image itself\&. Unmerging makes them disappear again, leaving in place only the files that were shipped with the base OS image itself\&.
.PP
Files and directories contained in the extension images outside of the
/usr/
and
/opt/
hierarchies are
\fInot\fR
merged, and hence have no effect when included in a system extension image\&. In particular, files in the
/etc/
and
/var/
included in a system extension image will
\fInot\fR
appear in the respective hierarchies after activation\&.
.PP
System extension images are strictly read\-only by default\&. On mutable host file systems,
/usr/
and
/opt/
hierarchies become read\-only while extensions are merged, unless mutability is enabled\&. Mutability may be enabled via the
\fB\-\-mutable=\fR
option; see "Mutability" below for more information\&.
.PP
System extensions are supposed to be purely additive, i\&.e\&. they are supposed to include only files that do not exist in the underlying basic OS image\&. However, the underlying mechanism (overlayfs) also allows overlaying or removing files, but it is recommended not to make use of this\&.
.PP
System extension images may be provided in the following formats:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Plain directories or btrfs subvolumes containing the OS tree
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Disk images with a GPT disk label, following the
\m[blue]\fBDiscoverable Partitions Specification\fR\m[]\&\s-2\u[1]\d\s+2
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Disk images lacking a partition table, with a naked Linux file system (e\&.g\&. erofs, squashfs or ext4)
.RE
.PP
These image formats are the same ones that
\fBsystemd-nspawn\fR(1)
supports via its
\fB\-\-directory=\fR/\fB\-\-image=\fR
switches and those that the service manager supports via
\fBRootDirectory=\fR/\fBRootImage=\fR\&. Similar to them they may optionally carry Verity authentication information\&.
.PP
System extensions are searched for in the directories
/etc/extensions/,
/run/extensions/
and
/var/lib/extensions/\&. The first two listed directories are not suitable for carrying large binary images, however are still useful for carrying symlinks to them\&. The primary place for installing system extensions is
/var/lib/extensions/\&. Any directories found in these search directories are considered directory based extension images; any files with the
\&.raw
suffix are considered disk image based extension images\&. When invoked in the initrd, the additional directory
/\&.extra/sysext/
is included in the directories that are searched for extension images\&. Note however, that by default a tighter image policy applies to images found there, though, see below\&. This directory is populated by
\fBsystemd-stub\fR(7)
with extension images found in the system\*(Aqs EFI System Partition\&.
.PP
During boot OS extension images are activated automatically, if the
systemd\-sysext\&.service
is enabled\&. Note that this service runs only after the underlying file systems where system extensions may be located have been mounted\&. This means they are not suitable for shipping resources that are processed by subsystems running in earliest boot\&. Specifically, OS extension images are not suitable for shipping system services or
\fBsystemd-sysusers\fR(8)
definitions\&. See the
\m[blue]\fBPortable Services\fR\m[]\&\s-2\u[2]\d\s+2
page for a simple mechanism for shipping system services in disk images, in a similar fashion to OS extensions\&. Note the different isolation on these two mechanisms: while system extension directly extend the underlying OS image with additional files that appear in a way very similar to as if they were shipped in the OS image itself and thus imply no security isolation, portable services imply service level sandboxing in one way or another\&. The
systemd\-sysext\&.service
service is guaranteed to finish start\-up before
basic\&.target
is reached; i\&.e\&. at the time regular services initialize (those which do not use
\fIDefaultDependencies=no\fR), the files and directories system extensions provide are available in
/usr/
and
/opt/
and may be accessed\&.
.PP
Note that there is no concept of enabling/disabling installed system extension images: all installed extension images are automatically activated at boot\&. However, you can place an empty directory named like the extension (no
\&.raw) in
/etc/extensions/
to "mask" an extension with the same name in a system folder with lower precedence\&.
.PP
A simple mechanism for version compatibility is enforced: a system extension image must carry a
/usr/lib/extension\-release\&.d/extension\-release\&.\fINAME\fR
file, which must match its image name, that is compared with the host
os\-release
file: the contained
\fIID=\fR
fields have to match unless
"_any"
is set for the extension\&. If the extension
\fIID=\fR
is not
"_any", the
\fISYSEXT_LEVEL=\fR
field (if defined) has to match\&. If the latter is not defined, the
\fIVERSION_ID=\fR
field has to match instead\&. If the extension defines the
\fIARCHITECTURE=\fR
field and the value is not
"_any"
it has to match the kernel\*(Aqs architecture reported by
\fBuname\fR(2)
but the used architecture identifiers are the same as for
\fIConditionArchitecture=\fR
described in
\fBsystemd.unit\fR(5)\&.
\fIEXTENSION_RELOAD_MANAGER=\fR
can be set to 1 if the extension requires a service manager reload after application of the extension\&. Note that for the reasons mentioned earlier:
\m[blue]\fBPortable Services\fR\m[]\&\s-2\u[2]\d\s+2
remain the recommended way to ship system services\&. System extensions should not ship a
/usr/lib/os\-release
file (as that would be merged into the host
/usr/
tree, overriding the host OS version data, which is not desirable)\&. The
extension\-release
file follows the same format and semantics, and carries the same content, as the
os\-release
file of the OS, but it describes the resources carried in the extension image\&.
.PP
The
\fBsystemd\-confext\fR
concept follows the same principle as the
\fBsystemd-sysext\fR(1)
functionality but instead of working on
/usr
and
/opt,
\fBconfext\fR
will extend only
/etc\&. Files and directories contained in the confext images outside of the
/etc/
hierarchy are
\fInot\fR
merged, and hence have no effect when included in the image\&. Formats for these images are of the same as sysext images\&. The merged hierarchy will be mounted with
"nosuid"
and (if not disabled via
\fB\-\-noexec=false\fR)
"noexec"\&.
.PP
Just like sysexts, confexts are strictly read\-only by default\&. Merging confexts on mutable host file systems will result in
/etc/
becoming read\-only\&. As with sysexts, mutability can be enabled via the
\fB\-\-mutable=\fR
option\&. Refer to "Mutability" below for more information\&.
.PP
Confexts are looked for in the directories
/run/confexts/,
/var/lib/confexts/,
/usr/lib/confexts/
and
/usr/local/lib/confexts/\&. The first listed directory is not suitable for carrying large binary images, however is still useful for carrying symlinks to them\&. The primary place for installing configuration extensions is
/var/lib/confexts/\&. Any directories found in these search directories are considered directory based confext images; any files with the
\&.raw
suffix are considered disk image based confext images\&.
.PP
Again, just like sysext images, the confext images will contain a
/etc/extension\-release\&.d/extension\-release\&.\fINAME\fR
file, which must match the image name (with the usual escape hatch of the
\fIuser\&.extension\-release\&.strict\fR
\fBxattr\fR(7)), and again with content being one or more of
\fIID=\fR,
\fIVERSION_ID=\fR, and
\fICONFEXT_LEVEL\fR\&. Confext images will then be checked and matched against the base OS layer\&.
.SH "USES"
.PP
The primary use case for system images are immutable environments where debugging and development tools shall optionally be made available, but not included in the immutable base OS image itself (e\&.g\&.
\fBstrace\fR(1)
and
\fBgdb\fR(1)
shall be an optionally installable addition in order to make debugging/development easier)\&. System extension images should not be misunderstood as a generic software packaging framework, as no dependency scheme is available: system extensions should carry all files they need themselves, except for those already shipped in the underlying host system image\&. Typically, system extension images are built at the same time as the base OS image \(em within the same build system\&.
.PP
Another use case for the system extension concept is temporarily overriding OS supplied resources with newer ones, for example to install a locally compiled development version of some low\-level component over the immutable OS image without doing a full OS rebuild or modifying the nominally immutable image\&. (e\&.g\&. "install" a locally built package with
\fBDESTDIR=/var/lib/extensions/mytest make install && systemd\-sysext refresh\fR, making it available in
/usr/
as if it was installed in the OS image itself\&.) This case works regardless if the underlying host
/usr/
is managed as immutable disk image or is a traditional package manager controlled (i\&.e\&. writable) tree\&.
.PP
With systemd\-confext one can perform runtime reconfiguration of OS services\&. Sometimes, there is a need to swap certain configuration parameter values or restart only a specific service without deployment of new code or a complete OS deployment\&. In other words, we want to be able to tie the most frequently configured options to runtime updateable flags that can be changed without a system reboot\&. This will help reduce servicing times when there is a need for changing the OS configuration\&. It also provides a reliable tool for managing configuration because all old configuration files disappear when the systemd\-confext image is removed\&.
.SH "MUTABILITY"
.PP
By default, merging system extensions on mutable host file systems will render
/usr/
and
/opt/
hierarchies read\-only\&. Merging configuration extensions will have the same effect on
/etc/\&. Mutable mode allows writes to these locations when extensions are merged\&.
.PP
The following modes are supported:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBdisabled\fR: Force immutable mode even if write routing directories exist below
/var/lib/extensions\&.mutable/\&. This is the default\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBauto\fR: Automatic mode\&. Mutability is disabled by default and only enabled if a corresponding write routing directory exists below
/var/lib/extensions\&.mutable/\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBenabled\fR: Force mutable mode and automatically create write routing directories below
/var/lib/extensions\&.mutable/
when required\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
\fBimport\fR: Force immutable mode like
\fBdisabled\fR
above, but merge the contents of directories below
/var/lib/extensions\&.mutable/
into the host file system\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
\fBephemeral\fR: Force mutable mode like
\fBenabled\fR
above, but instead of using write routing directory below
/var/lib/extensions\&.mutable/,
\fBsystemd\-sysext\fR
will use empty ephemeral directories\&. This means that the modifications made in the merged hierarchies will be gone when the hierarchies are unmerged\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
\fBephemeral\-import\fR: Force mutable mode like
\fBephemeral\fR
above, but instead of ignoring the contents of write routing directories under
/var/lib/extensions\&.mutable/, merge them into the host file system, like
\fBimport\fR
does\&.
.RE
.sp
See "Options" below on specifying modes using the
\fB\-\-mutable=\fR
command line option\&.
.PP
With exception of the ephemeral mode, the mutable mode routes writes to subdirectories in
/var/lib/extensions\&.mutable/\&.
.RS 4
Writes to /usr/ are directed to /var/lib/extensions\&.mutable/usr/
.RE
.RS 4
writes to /opt/ are directed to /var/lib/extensions\&.mutable/opt/, and
.RE
.RS 4
writes to /etc/ land in /var/lib/extensions\&.mutable/etc/\&.
.RE
.PP
If
usr/,
opt/, or
etc/
in
/var/lib/extensions\&.mutable/
are symlinks, then writes are directed to the symlinks\*(Aq targets\&. Consequently, to retain mutability of a host file system, create symlinks
.RS 4
/var/lib/extensions\&.mutable/etc/ → /etc/
.RE
.RS 4
/var/lib/extensions\&.mutable/usr/ → /usr/
.RE
.RS 4
/var/lib/extensions\&.mutable/opt/ → /opt/
.RE
to route writes back to the original base directory hierarchy\&.
.PP
Alternatively, a temporary file system may be mounted to
/var/lib/extensions\&.mutable/, or symlinks in
/var/lib/extensions\&.mutable/
may point to sub\-directories on a temporary file system (e\&.g\&. below
/tmp/) to only allow ephemeral changes\&. Note that this is not the same as ephemeral mode, because the temporary file system will still exist after unmerging\&.
.PP
Added in version 256\&.
.SH "COMMANDS"
.PP
The following commands are understood by both the sysext and confext concepts:
.PP
\fBstatus\fR
.RS 4
When invoked without any command verb, or when
\fBstatus\fR
is specified the current merge status is shown, separately (for both
/usr/
and
/opt/
of sysext and for
/etc/
of confext)\&.
.sp
Added in version 248\&.
.RE
.PP
\fBmerge\fR
.RS 4
Merges all currently installed system extension images into
/usr/
and
/opt/, by overmounting these hierarchies with an
"overlayfs"
file system combining the underlying hierarchies with those included in the extension images\&. This command will fail if the hierarchies are already merged\&. For confext, the merge happens into the
/etc/
directory instead\&.
.sp
Added in version 248\&.
.RE
.PP
\fBunmerge\fR
.RS 4
Unmerges all currently installed system extension images from
/usr/
and
/opt/
for sysext and
/etc/, for confext, by unmounting the
"overlayfs"
file systems created by
\fBmerge\fR
prior\&.
.sp
Added in version 248\&.
.RE
.PP
\fBrefresh\fR
.RS 4
A combination of
\fBunmerge\fR
and
\fBmerge\fR: if already mounted the existing
"overlayfs"
instance is unmounted temporarily, and then replaced by a new version\&. This command is useful after installing/removing system extension images, in order to update the
"overlayfs"
file system accordingly\&. If no system extensions are installed when this command is executed, the equivalent of
\fBunmerge\fR
is executed, without establishing any new
"overlayfs"
instance\&. Note that currently there\*(Aqs a brief moment where neither the old nor the new
"overlayfs"
file system is mounted\&. This implies that all resources supplied by a system extension will briefly disappear \(em even if it exists continuously during the refresh operation\&.
.sp
Added in version 248\&.
.RE
.PP
\fBlist\fR
.RS 4
A brief list of installed extension images is shown\&.
.sp
Added in version 248\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print a short help text and exit\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print a short version string and exit\&.
.RE
.SH "OPTIONS"
.PP
\fB\-\-root=\fR
.RS 4
Operate relative to the specified root directory, i\&.e\&. establish the
"overlayfs"
mount not on the top\-level host
/usr/
and
/opt/
hierarchies for sysext or
/etc/
for confext, but below some specified root directory\&.
.sp
Added in version 248\&.
.RE
.PP
\fB\-\-force\fR
.RS 4
When merging system extensions into
/usr/
and
/opt/
for sysext and
/etc/
for confext, ignore version incompatibilities, i\&.e\&. force merging regardless of whether the version information included in the images matches the host or not\&.
.sp
Added in version 248\&.
.RE
.PP
\fB\-\-image\-policy=\fR\fB\fIpolicy\fR\fR
.RS 4
Takes an image policy string as argument, as per
\fBsystemd.image-policy\fR(7)\&. The policy is enforced when operating on system extension disk images\&. If not specified defaults to
"root=verity+signed+encrypted+unprotected+absent:usr=verity+signed+encrypted+unprotected+absent"
for system extensions, i\&.e\&. only the root and
/usr/
file systems in the image are used\&. For configuration extensions defaults to
"root=verity+signed+encrypted+unprotected+absent"\&. When run in the initrd and operating on a system extension image stored in the
/\&.extra/sysext/
directory a slightly stricter policy is used by default:
"root=signed+absent:usr=signed+absent", see above for details\&.
.sp
Added in version 254\&.
.RE
.PP
\fB\-\-mutable=\fR\fB\fIBOOL\fR\fR\fB|\fR\fB\fIauto\fR\fR\fB|\fR\fB\fIimport\fR\fR
.RS 4
Set mutable mode\&.
.PP
\fBno\fR
.RS 4
force immutable mode even with write routing directories present\&. This is the default\&.
.sp
Added in version 256\&.
.RE
.PP
\fBauto\fR
.RS 4
enable mutable mode individually for
/usr/,
/opt/, and
/etc/
if write routing sub\-directories or symlinks are present in
/var/lib/extensions\&.mutable/; disable otherwise\&. See "Mutability" above for more information on write routing\&.
.sp
Added in version 256\&.
.RE
.PP
\fByes\fR
.RS 4
force mutable mode\&. Write routing directories will be created in
/var/lib/extensions\&.mutable/
if not present\&.
.sp
Added in version 256\&.
.RE
.PP
\fBimport\fR
.RS 4
immutable mode, but with contents of write routing directories in
/var/lib/extensions\&.mutable/
also merged into the host file system\&.
.sp
Added in version 256\&.
.RE
.PP
\fBephemeral\fR
.RS 4
force mutable mode, but with contents of write routing directories in
/var/lib/extensions\&.mutable/
being ignored, and modifications of the host file system being discarded after unmerge\&.
.sp
Added in version 256\&.
.RE
.PP
\fBephemeral\-import\fR
.RS 4
force mutable mode, with contents of write routing directories in
/var/lib/extensions\&.mutable/
being merged into the host file system, but with the modifications made to the host file system being discarded after unmerge\&.
.sp
Added in version 256\&.
.RE
.sp
Added in version 256\&.
.RE
.PP
\fB\-\-noexec=\fR\fB\fIBOOL\fR\fR
.RS 4
When merging configuration extensions into
/etc/
the
"MS_NOEXEC"
mount flag is used by default\&. This option can be used to disable it\&.
.sp
Added in version 254\&.
.RE
.PP
\fB\-\-no\-reload\fR
.RS 4
When used with
\fBmerge\fR,
\fBunmerge\fR
or
\fBrefresh\fR, do not reload daemon after executing the changes even if an extension that is applied requires a reload via the
\fIEXTENSION_RELOAD_MANAGER=\fR
set to 1\&.
.sp
Added in version 255\&.
.RE
.PP
\fB\-\-no\-pager\fR
.RS 4
Do not pipe output into a pager\&.
.RE
.PP
\fB\-\-no\-legend\fR
.RS 4
Do not print the legend, i\&.e\&. column headers and the footer with hints\&.
.RE
.PP
\fB\-\-json=\fR\fB\fIMODE\fR\fR
.RS 4
Shows output formatted as JSON\&. Expects one of
"short"
(for the shortest possible output without any redundant whitespace or line breaks),
"pretty"
(for a pretty version of the same, with indentation and line breaks) or
"off"
(to turn off JSON output, the default)\&.
.RE
.SH "EXIT STATUS"
.PP
On success, 0 is returned\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1), \fBsystemd-nspawn\fR(1), \fBsystemd-stub\fR(7), \fBimportctl\fR(1)
.SH "NOTES"
.IP " 1." 4
Discoverable Partitions Specification
.RS 4
\%https://uapi-group.org/specifications/specs/discoverable_partitions_specification
.RE
.IP " 2." 4
Portable Services
.RS 4
\%https://systemd.io/PORTABLE_SERVICES
.RE
