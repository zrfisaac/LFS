#!/bin/bash
#
# Copyright (C) 2023 Masatake YAMATO <yamato@redhat.com>
#
# This file is part of util-linux.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
TS_TOPDIR="${0%/*}/../.."
TS_DESC="XMODE.m for classical system calls for multiplexing"

. "$TS_TOPDIR"/functions.sh
ts_init "$*"

ts_check_test_command "$TS_CMD_LSFD"
ts_check_test_command "$TS_HELPER_MKFDS"

# /proc/${PID}/syscall is rendered in the host side byteorder.
ts_skip_qemu_user

ts_check_prog "cat"
ts_check_prog "cut"
ts_check_prog "grep"

ts_cd "$TS_OUTDIR"

PID=

for multiplexer in pselect6 select poll ppoll; do
    ts_init_subtest "${multiplexer}"
    if ! "$TS_HELPER_MKFDS" -W | grep -q "^$multiplexer\$"; then
	ts_skip_subtest "the multiplexer ${multiplexer} is not available"
	continue
    fi

    {
	coproc MKFDS { "$TS_HELPER_MKFDS" -w "$multiplexer" multiplexing {10..22}; }
    } > "$TS_OUTPUT" 2>&1

    if read -r -u "${MKFDS[0]}" PID; then
	syscall_line=$(cat /proc/"${PID}"/syscall 2>> "$TS_OUTPUT")
	syscall_status=$?
	if [[ "$syscall_status" != 0 ]]; then
	    kill -CONT "${PID}"
	    wait "${MKFDS_PID}"
	    ts_skip_subtest "cannot open /proc/${PID}/syscall"
	    continue
	fi
	syscall_n=$(cut -f1 -d' ' <<< "$syscall_line")
	# We assume the syscall number for the $multiplexer is not zero
	# on any platforms.
	if [[ "$syscall_n" == 0 ]]; then
	    kill -CONT "${PID}"
	    wait "${MKFDS_PID}"
	    ts_skip_subtest "incorrect syscall number in /proc/${PID}/syscall"
	    continue
	fi

	{
	    "${TS_CMD_LSFD}" -n -o ASSOC,XMODE -p "${PID}" -Q '(FD >= 10) && (FD <= 22)'
	    echo "[$multiplexer] ASSOC,XMODE: $?"

	    # For debugging
	    if [[ $("${TS_CMD_LSFD}" -n -o XMODE -p "${PID}" -Q '(FD == 10)') != "r----m" ]]; then
		cat /proc/"${PID}"/syscall
	    fi

	    echo DONE >&"${MKFDS[1]}"
	} >> "$TS_OUTPUT" 2>&1
    fi

    wait "${MKFDS_PID}"
    ts_finalize_subtest
done

ts_finalize
